# app/config/schema.yml
# Geo-API
annotationGenerators:
    - ApiPlatform\SchemaGenerator\AnnotationGenerator\PhpDocAnnotationGenerator
    - ApiPlatform\SchemaGenerator\AnnotationGenerator\DoctrineOrmAnnotationGenerator
    - ApiPlatform\SchemaGenerator\AnnotationGenerator\ConstraintAnnotationGenerator
    - ApiPlatform\SchemaGenerator\AnnotationGenerator\ApiPlatformCoreAnnotationGenerator

author: Goutis Dimitris
types: # The list of type to generated (a PHP entity class by type will be generated)


  SoftwareApplication:
    parent: false
    properties:
      name: {range: Text}
      description: {range: Text}
      url: {range: URL}
      image: ~
      applicationCategory: {range: Text}
      applicationSubCategory: {range: Text}
      releaseNotes: {range: Text}
      softwareVersion: {range: Text}
      licence: {range: Text}
      review: {range: Text}
      keywords: {range: Text}
      text: {range: Text}
      isAccessibleForFree: {range: Boolean}
      provider: {range: Text}
      datePublished: {range: Date}
      dateModified: {range: Date}
      aggregateRating: {range: Text}

  SoftwareApplicationTesting:
    guessFrom: SoftwareApplication
    parent: false
    properties:
      name: {range: Text}
      description: {range: Text}
      url: {range: URL}
      image: ~
      applicationCategory: {range: Text}
      applicationSubCategory: {range: Text}
      releaseNotes: {range: Text}
      softwareVersion: {range: Text}
      licence: {range: Text}
      review: {range: Text}
      keywords: {range: Text}
      text: {range: Text}
      isAccessibleForFree: {range: Boolean}
      provider: {range: Text}
      datePublished: {range: Date}
      dateModified: {range: Date}
      aggregateRating: {range: Text}

  StatsVoc:
    parent: false
    properties:
      title: {range: Text}
      description: {range: Text}
      url: {range: Text, unique: true}

  StatsClass:
    parent: false
    properties:
      title: {range: Text}
      description: {range: Text}
      url: {range: Text, unique: true}
      vocabulary: {range: StatsVoc, cardinality: (1..1)}


  # BlogPosting: ~ # A type to generate a PHP entity class from, including all its properties (here this type has no specific property, they are all inherited)
  # Article: # Schema.org has an inheritance system, we will configure all types of the hierarchy
  #   properties: # The list of properties we want to use
  #     articleBody: ~
  #     articleSection: ~
  # CreativeWork:
  #   properties:
  #     author:
  #       range: Person # PHP Schema handle relations. Here we force the type of the property to Person
  #       cardinality: (*..0) # Force the cardinality of the relation
  #     headline: ~
  #     isFamilyFriendly: ~
  #     datePublished: ~

  # Person: # Person is a relation of the "CreativeWork" type (property "author"), PHP Schema will generate relations for us
  #   properties: {} # We don't want any specific property for a person except "name" inherited from Thing
