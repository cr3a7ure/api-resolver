<?php

// src/AppBundle/Action/ApiRefAction.php

namespace AppBundle\Action;

use Symfony\Component\Serializer\Annotation\Groups;
use AppBundle\Entity\ApiRef;
use Doctrine\Common\Persistence\ManagerRegistry;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\Routing\Annotation\Route;
use Unirest;
use Easyrdf;
use ML\JsonLD\JsonLD as JsonLD;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;

use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;

use ApiPlatform\Core\EventListener\EventPriorities;
use Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent;
use Symfony\Component\HttpKernel\KernelEvents;

class ApiRefAction
{

    protected $requestStack;

    public function __construct(RequestStack $requestStack)
    {
        $this->requestStack = $requestStack;
    }

    protected function getRequest()
    {
        return $this->requestStack->getCurrentRequest();
    }

    protected function validateData(string $data)
    {
        return $data;
    }
    protected function retrieveData(string $data)
    {
        return $data;
    }
/**
 * [retrieveClass description]
 * @param  \EasyRdf_Graph $graph [description]
 * @return classes[array]                [description]
 */
    protected function retrieveClass(\EasyRdf_Graph $graph)
    {
        $nodes = $graph->resources();
        dump($nodes);
        $classes = array();
        foreach( $nodes as $value ) {
            if (!($value->isBnode())) {
              $classes[$value->getUri()] = $value;
            } else {
              //We have a bnode Class?!
            }
        }
        dump($classes);
        return $classes;
    }

    protected function getPrefix()
    {
        $prefix = '
        PREFIX schema: <http://schema.org/>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX hydra: <http://www.w3.org/ns/hydra/core#>';

        return $prefix;
    }
    // protected function sparqlActionQuery(\EasyRdf_Resource $actionProperty, string $options = '')
    // {
    //   $properties = $this->retrieveAction($actionProperty);
    //   return $
    // }
/**
 * [retrievePropertyProperties description]
 * @param  \EasyRdf_Resource $property [schema:potentialAction]
 * @param  string            $class    [description]
 * @param  \EasyRdf_Graph    $graph    [description]
 * @return [type]                      [description]
 */

    protected function retrieveAction(\EasyRdf_Resource $actionProperty, string $options = '')
    {
      $actionProps = $actionProperty->properties();
      foreach ($actionProps as $i => $actionPredicate) {
        $actionValues = $actionProperty->allResources($actionPredicate);
        foreach ($actionValues as $k => $value) {
          if ($value->isBNode()) {
            $nestedProperties[$actionPredicate] = $value->type();
          } else {
            $nestedProperties[$actionPredicate] = $value->getUri();
          }
        }
        // dump($actionPredicate);
        // dump($actionValues);
      }
      dump($nestedProperties);
      return $nestedProperties;
      /*
      "rdf:type" => "http://schema.org/searchAction"
      "schema:object" => "http://schema.org/Offer"
      "schema:query" => "schema:Flight"
      "schema:result" => "http://schema.org/Offer"
       */
    }

    protected function retrievePropertyProperties(\EasyRdf_Resource $class, string $property, \EasyRdf_Graph $graph)
    {
      dump($class);
      dump("\nProperty ".$property . "\n contains properties:");
      $actionProps = $class->properties();
      $containedResources = $class->allResources($property); //retrieves Resources
      // dump($property);
      // dump($containedResources);
      $nestedProperties[$property] = [];
      foreach ($containedResources as $i => $res) { //If we have contained resources!!
        dump("\nPredicate: ".$res);
        $rangeType = $res->types(); //Retrieve types of property
        foreach ($rangeType as $k => $typeUri) {
        dump("\nType - range: ".$typeUri);
          if(preg_match("/(Action)/", $typeUri, $checkAction)==1) {
            // $nestedProperties[$property]['rdfs:range'] = $typeUri;
            $test = $this->retrieveAction($res);
            dump($test);
             $nestedProperties[$property] = $this->retrieveAction($res);
          } else {
            // suppose we have only other classes types
            $nestedProperties[$property]['rdfs:range'] = $typeUri;
          }

        }
        // dump($rangeType);

      }
      dump('LOL');
      dump($nestedProperties);
      return $nestedProperties;
    }

    protected function retrieveProperty(\EasyRdf_Graph $graph,\EasyRdf_Resource $class)
    {
      dump("\nRetrieve properties for Class ". $class->getUri());
      $nestedProperties = array();
      $types = $graph->allOfType($class);
      $classArray = array();
      $classProperties = array();
      $selectedProperties = array();
      $nestedProperties = array();
      // $props = $graph->properties($q[0]->getUri());// Get al the propsUris
      $k = 0;
      foreach ($types as $i => $node) {
        $classProperties = $graph->properties($node->getUri());
        dump("\nNodes of current class type: " . count($classProperties));
        if( (count($classProperties)==1)&&($classProperties[0]=='rdf:type') ){
          //used as rdfs:range option as this bnode has only the type property
        } else {
          $classArray[$k] = $node;
          dump("\nMain Class at bnode: " . $node);
          $selectedProperties = $classProperties;
          $k++;
        }
        $test = $node->types();
        // dump($node);
        // dump($classProperties);
        // dump($classArray);
      } //We found the main class
      // dump($types);
      // dump($class);
      foreach ($selectedProperties as $i => $predicate) {
        dump("\nResolving property: " . $predicate);
        if($predicate!='rdf:type') {
          //SKIP the rdf:type of this class-bnode
          $nestedProperties[$predicate] = array();
          $containedResources = $classArray[0]->allResources($predicate);//we use only 1
          $nestedProperties[$predicate] = $this->retrievePropertyProperties($classArray[0],$predicate,$graph);
          // dump($properties2);
        }
      }
      dump("MANASOU");
        dump($nestedProperties);
        return $nestedProperties; //rmeove rdf:type property
    }

    protected function sparqlClassQuery(\EasyRdf_Graph $graph,\EasyRdf_Resource $class,string $className = '')
    {
      $className = $class->getUri();
      dump("Creating search query for class ". $class);
      $classProperties = $this->retrieveProperty($graph,$class);
      $propertyOptions = '';
      $range = '';
      $i = 1;
      // dump($kapa); ?class hydra:supportedProperty ?props .
      foreach( $classProperties as $propertyType => $options ) {
        if ($propertyType == 'schema:potentialAction') {
          dump("LOL");
          dump($classProperties);
          dump($options);
          //different actions for potentialActions
          foreach ($options as $optionName => $optionsArray) {
            // dump($optionsArray);
            // foreach ($optionsArray as $predicate => $value) {
              // $propertyOptions .= '?action'.$i.'_IRI' . ' '. $predicate. ' ' . $value . " .\n          ";
              $propertyOptions .= '?action'.$i.'_IRI' . ' schema:object ' . '?class' . " .\n          ";
              //We are checking this exact class
              $propertyOptions .= '?action'.$i.'_IRI' . ' schema:query ' . '?query' . " .\n          ";
              $propertyOptions .= '?query' . ' rdf:type ' . '?queryClass' . " .\n          ";
              $propertyOptions .= '?queryClass' . ' rdf:type ' . $optionsArray['schema:query'] . " .\n          ";
              //query is not @type=@id so we need to specify it's intermidiate class
              $propertyOptions .= '?action'.$i.'_IRI' . ' schema:result ' . '?result' . " .\n          ";
              $propertyOptions .= '?result' . ' rdf:type ' . '<'. $optionsArray['schema:result'] . '>'. " .\n          ";
              $propertyOptions .= '?action'.$i.'_IRI' . ' schema:target ' . '?target' . " .\n          ";
            // }
          } //add property Options
          // $propertyOptions .= '?action ' .
        } else {
          $propertyOptions .= '?class' . ' hydra:supportedProperty ' . '?prop'.$i . " .\n          ";
          $propertyOptions .= '?prop'.$i . ' hydra:property ' . '?prop'.$i.'_IRI' . " .\n          ";
          $propertyOptions .= '?prop'.$i.'_IRI' . ' rdf:type ' . $propertyType . " .\n          ";
          foreach ($options as $optionName => $optionsArray) {
            // dump($optionsArray);
            foreach ($optionsArray as $predicate => $value) {
              $propertyOptions .= '?prop'.$i.'_IRI' . ' '. $predicate. ' ' . $value . " .\n          ";
            }
          } //add property Options
        }
        $i++;
      }
      $prefix = $this->getPrefix();
      $query = $prefix . "\n".
      'SELECT DISTINCT ?class ?entrypoint ?target ?queryClass ?result
      FROM <http://localhost:8090/test1/data/apiv12>
      WHERE  {
        ?class rdf:type ' .'<'. $className .'>.
        ?server hydra:supportedClass ?class.
        ?server hydra:entrypoint ?entrypoint .
        ' . $propertyOptions . '}';
      return $query;
      dump($query);
    }

    protected function testHydra() {
        $prefix = $this->getPrefix();
        $query = $prefix .
        'DESCRIBE *
        FROM <http://localhost:8090/test1/data/apiv10>
        WHERE  { <http://localhost:8091/docs.jsonld> ?p ?o }';
        return $query;
    }

    protected function getBindings(string $class)
    {
        $query = 'prefix hydra: <http://www.w3.org/ns/hydra/core#>
            DESCRIBE ?subject
            FROM <http://localhost:8090/test1/data/test1>
            WHERE {
              ?subject hydra:supportedProperty ?object
            }
            LIMIT 10';
        return $data;
    }

    protected function searchAction(\EasyRdf_Graph $graph,array $class)
    {

    }
    /**
     * @Route(
     *     name="api_ref_action",
     *     path="/api_ref/special",
     *     defaults={"_api_resource_class"=ApiRef::class, "_api_collection_operation_name"="special"}
     * )
     * @Method("PUT")
     */
    // public function __invoke($data) // API Platform retrieves the PHP entity using the data provider then (for POST and
    public function __invoke($data) // API Platform retrieves the PHP entity using the data provider then (for POST and
                                    // PUT method) deserializes user data in it. Then passes it to the action. Here $data
                                    // is an instance of Book having the given ID. By convention, the action's parameter
                                    // must be called $data.
    {
        // $request = $this->getRequest()->getContent();
        // dump($request);

        $req = '{
  "@context" : {
    "@base": "http://local/",
    "expects" : {
      "@id" : "http://www.w3.org/ns/hydra/core#expects",
      "@type" : "@id"
    },
    "returns" : {
      "@id" : "http://www.w3.org/ns/hydra/core#returns",
      "@type" : "@id"
    },
    "method" : {
      "@id" : "http://www.w3.org/ns/hydra/core#method"
    },
    "title" : {
      "@id" : "http://www.w3.org/ns/hydra/core#title"
    },
    "label" : {
      "@id" : "http://www.w3.org/2000/01/rdf-schema#label"
    },
    "writable" : {
      "@id" : "http://www.w3.org/ns/hydra/core#writable",
      "@type" : "http://www.w3.org/2001/XMLSchema#boolean"
    },
    "required" : {
      "@id" : "http://www.w3.org/ns/hydra/core#required",
      "@type" : "http://www.w3.org/2001/XMLSchema#boolean"
    },
    "readable" : {
      "@id" : "http://www.w3.org/ns/hydra/core#readable",
      "@type" : "http://www.w3.org/2001/XMLSchema#boolean"
    },
    "object": {
      "@id": "schema:object",
      "@type": "@id"
    },
    "result": {
      "@id": "schema:result",
      "@type": "@id"
    },
    "target": {
      "@id": "schema:target",
      "@type": "@id"
    },
    "query": {
      "@id": "schema:query"
    },
    "property" : {
      "@id" : "http://www.w3.org/ns/hydra/core#property",
      "@type" : "@id"
    },
    "description" : {
      "@id" : "http://www.w3.org/ns/hydra/core#description"
    },
    "supportedProperty" : {
      "@id" : "http://www.w3.org/ns/hydra/core#supportedProperty",
      "@type" : "@id"
    },
    "supportedOperation" : {
      "@id" : "http://www.w3.org/ns/hydra/core#supportedOperation",
      "@type" : "@id"
    },
    "@vocab" : "http://schema.org/",
    "schema" : "http://schema.org/",
    "hydra" : "http://www.w3.org/ns/hydra/core#",
    "xmls" : "http://www.w3.org/2001/XMLSchema#",
    "owl" : "http://www.w3.org/2002/07/owl#",
    "rdf" : "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "xsd" : "http://www.w3.org/2001/XMLSchema#",
    "rdfs" : "http://www.w3.org/2000/01/rdf-schema#"
  },
  "var1": {
    "@type": "GeoCoordinates",
    "addressLocality": "",
    "addressRegion" : "",
    "id": 0,
    "addressCountry": ""
  },
  "var2": {
    "@type": "Offer",
    "priceCurrency": "",
    "price": "",
    "seller": "",
    "itemOffered": {
      "@type": "Flight",
      "arrivalAirport": {"@type": "schema:Airport"},
      "departureAirport": {"@type": "Airport"},
      "departureTime": "",
      "arrivalTime": ""
    },
    "potentialAction": {
      "@type": "searchAction",
      "query": {"@type": "schema:Flight"},
      "object": "schema:Offer",
      "result": "schema:Offer"
    }
  },
  "var3": {
    "@type": "Airport",
    "iataCode": "",
    "address": {
      "@type": "schema:PostalAddress",
      "addressCountry": "",
      "addressLocality": ""
    },
    "potentialAction": {
      "@type": "schema:searchAction",
      "object": "schema:Airport",
      "result": "schema:Airport",
      "query": {"@type": "schema:PostalAddress"}
    }
  }
}';

        $graph = new \EasyRdf_Graph();
        $temp2 = new \EasyRdf_Graph();

        // $test = $request;
        // dump($test);
        $expanded = JsonLD::expand($req);
        $graph->parse($expanded,'jsonld',null);
        // dump($jsonld);
        dump($graph);
        // GRAPH retrieve
        $arr = $graph->resources();//epistrefei ola ta res 4
        dump($arr);
        // $arr2 = $graph->allOfType("schema:test"); //epistrefei ton gid2
        // dump($arr2);
        // $props = $graph->properties($arr2[0]->getUri());
        // dump($props);
        // dump($arr[0]->getUri());
        $queries = array();
        $graphClasses = $this->retrieveClass($graph);
        foreach ($graphClasses as $classUri => $classResource) {
          // $tt2 = $this->retrieveProperty($graph,$classResource);
          $queries[$classUri] = $this->sparqlClassQuery($graph,$classResource);
        }
        foreach ($queries as $classUri => $queryString) {
          dump($classUri . "\n" . $queryString);
        }
        // dump($graphClasses);
        // dump($tt3);
        // dump($tt2);
        // dump($graph);


        $piou = $graph->allOfType('schema:searchAction');
        dump($piou);

        $graphOut = $graph->serialise('jsonld');
        $lal = $this->validateData($graphOut);
        dump($graphOut);

        $select = '
        SELECT ?desco ?subject
        FROM <http://localhost:8090/test1/data/apiv12>
        WHERE {
          schema:PostalAddress hydra:supportedProperty ?test .
          ?subject hydra:supportedClass schema:PostalAddress .
          ?test hydra:description ?desco .
        }';

        $sparql = new \EasyRdf_Sparql_Client('http://localhost:8090/test1/query');
        $query = 'prefix hydra: <http://www.w3.org/ns/hydra/core#>
            DESCRIBE ?subject
            FROM <http://localhost:8090/test1/data/test1>
            WHERE {
              ?subject hydra:supportedProperty ?object
            }
            LIMIT 10';

        $url = 'http://localhost:8081/docs.jsonld';
        $headers = array("Content-Type" => "application/ld+json",
                        "Accept" => "application/ld+json");
        $query = '';//"{\"search\":\"".$variable."\"}";
        $response = Unirest\Request::get($url,$headers,$query);
        // dump($response);
        // $expanded = JsonLD::expand($temp);
        $temp2->parse($response->body,'jsonld',null);
        // throw new \Exception('DUMPSTERRRRR!');
        return new Response($temp2->serialise('jsonld'));


$testHydra = '{
  "@context": {
    "vocab": "http://localhost:8081/docs.jsonld#",
    "@base": "http://localhost:8081",
    "hydra": "http://www.w3.org/ns/hydra/core#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xmls": "http://www.w3.org/2001/XMLSchema#",
    "owl": "http://www.w3.org/2002/07/owl#",
    "domain": {
      "@id": "rdfs:domain",
      "@type": "@id"
    },
    "range": {
      "@id": "rdfs:range",
      "@type": "@id"
    },
    "subClassOf": {
      "@id": "rdfs:subClassOf",
      "@type": "@id"
    },
    "expects": {
      "@id": "hydra:expects",
      "@type": "@id"
    },
    "returns": {
      "@id": "hydra:returns",
      "@type": "@id"
    },
    "property": {
      "@id": "hydra:property"
    },
    "required": {
      "@id": "hydra:required"
    },
    "variable": {
      "@id": "hydra:variable"
    }
  },
  "@id": "/docs.jsonld",
  "hydra:title": "API Platforms demo",
  "hydra:description": "This is a demo application of the [API Platform](https://api-platform.com) framework.\n[Its source code](https://github.com/api-platform/demo) includes various examples, check it out!\n",
  "hydra:entrypoint": "/",
  "hydra:supportedClass": [
    {
      "@id": "vocab:Action",
      "@type": [
        "hydra:Class",
        "http://schema.org/Action"
      ],
      "jsonld_context": "test",
      "rdfs:label": "Action",
      "hydra:title": "Action",
      "hydra:supportedProperty": [
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/additionalType",
            "@type": "rdf:Property",
            "rdfs:label": "additionalType",
            "domain": "http://schema.org/Action",
            "range": "xmls:string"
          },
          "hydra:title": "additionalType",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the typeof attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/identifier",
            "@type": "rdf:Property",
            "rdfs:label": "identifier",
            "domain": "http://schema.org/Action",
            "range": "xmls:string"
          },
          "hydra:title": "identifier",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The identifier property represents any kind of identifier for any kind such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. Seodel.html#identifierBg) for more details"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/actionStatus",
            "@type": "rdf:Property",
            "rdfs:label": "actionStatus",
            "domain": "http://schema.org/Action",
            "range": "xmls:string"
          },
          "hydra:title": "actionStatus",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "Indicates the current disposition of the Action"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/agent",
            "@type": "rdf:Property",
            "rdfs:label": "agent",
            "domain": "http://schema.org/Action",
            "range": "xmls:string"
          },
          "hydra:title": "agent",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The direct performer or driver of the action (animate or inanimate). e.g. book"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/object",
            "@type": "rdf:Property",
            "rdfs:label": "object",
            "domain": "http://schema.org/Action",
            "range": "xmls:string"
          },
          "hydra:title": "object",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesnt). e.g. John read *"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/result",
            "@type": "rdf:Property",
            "rdfs:label": "result",
            "domain": "http://schema.org/Action",
            "range": "xmls:string"
          },
          "hydra:title": "result",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The result produced in the action. e.g. J"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/target",
            "@type": "rdf:Property",
            "rdfs:label": "target",
            "domain": "http://schema.org/Action",
            "range": "xmls:string"
          },
          "hydra:title": "target",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "Indicates a target EntryPoint for an Action"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/participant",
            "@type": "rdf:Property",
            "rdfs:label": "participant",
            "domain": "http://schema.org/Action",
            "range": "xmls:string"
          },
          "hydra:title": "participant",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "Other co-agents that participated in the action indirectly. e.g. John wrote a book with "
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/endTime",
            "@type": "rdf:Property",
            "rdfs:label": "endTime",
            "domain": "http://schema.org/Action",
            "range": "xmls:dateTime"
          },
          "hydra:title": "endTime",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January tote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/startTime",
            "@type": "rdf:Property",
            "rdfs:label": "startTime",
            "domain": "http://schema.org/Action",
            "range": "xmls:dateTime"
          },
          "hydra:title": "startTime",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a bookthat Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions"
        }
      ],
      "hydra:supportedOperation": [
        {
          "@type": [
            "hydra:operation",
            "schema:Action"
          ],
          "hydra:method": "GET",
          "hydra:title": "Retrieves Action resource.",
          "rdfs:label": "Retrieves Action resource.",
          "returns": "http://schema.org/Action"
        }
      ]
    },
    {
      "@id": "vocab:PostalAddress",
      "@type": [
        "hydra:Class",
        "http://schema.org/PostalAddress"
      ],
      "jsonld_context": "test",
      "rdfs:label": "PostalAddress",
      "hydra:title": "PostalAddress",
      "hydra:supportedProperty": [
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/addressCountry",
            "@type": "rdf:Property",
            "rdfs:label": "addressCountry",
            "domain": "http://schema.org/PostalAddress",
            "range": "xmls:string"
          },
          "hydra:title": "addressCountry",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The country. For example, USA. You can also provide the two-letter "
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/addressLocality",
            "@type": "rdf:Property",
            "rdfs:label": "addressLocality",
            "domain": "http://schema.org/PostalAddress",
            "range": "xmls:string"
          },
          "hydra:title": "addressLocality",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The locality. For example, Mountain View"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/addressRegion",
            "@type": "rdf:Property",
            "rdfs:label": "addressRegion",
            "domain": "http://schema.org/PostalAddress",
            "range": "xmls:string"
          },
          "hydra:title": "addressRegion",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The region. For example, CA"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/postalCode",
            "@type": "rdf:Property",
            "rdfs:label": "postalCode",
            "domain": "http://schema.org/PostalAddress",
            "range": "xmls:string"
          },
          "hydra:title": "postalCode",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The postal code. For example, 94043"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/streetAddress",
            "@type": "rdf:Property",
            "rdfs:label": "streetAddress",
            "domain": "http://schema.org/PostalAddress",
            "range": "xmls:string"
          },
          "hydra:title": "streetAddress",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The street address. For example, 1600 Amphitheatre Pkwy"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/potentialAction",
            "@type": "hydra:Link",
            "rdfs:label": "potentialAction",
            "domain": "http://schema.org/PostalAddress",
            "range": "http://schema.org/Action"
          },
          "hydra:title": "potentialAction",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "Indicates a potential Action, which describes an idealized action in which this thing would play an object role"
        }
      ],
      "hydra:supportedOperation": [
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/Action"
          ],
          "hydra:method": "GET",
          "hydra:title": "Retrieves PostalAddress resource.",
          "rdfs:label": "Retrieves PostalAddress resource.",
          "returns": "http://schema.org/PostalAddress"
        },
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/UpdateAction"
          ],
          "expects": "http://schema.org/PostalAddress",
          "hydra:method": "PUT",
          "hydra:title": "Replaces the PostalAddress resource.",
          "rdfs:label": "Replaces the PostalAddress resource.",
          "returns": "http://schema.org/PostalAddress"
        },
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/DeleteAction"
          ],
          "hydra:method": "DELETE",
          "hydra:title": "Deletes the PostalAddress resource.",
          "rdfs:label": "Deletes the PostalAddress resource.",
          "returns": "owl:Nothing"
        }
      ]
    },
    {
      "@id": "vocab:Offer",
      "@type": [
        "hydra:Class",
        "http://schema.org/Offer"
      ],
      "jsonld_context": "test",
      "rdfs:label": "Offer",
      "hydra:title": "Offer",
      "hydra:supportedProperty": [
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/priceCurrency",
            "@type": "rdf:Property",
            "rdfs:label": "priceCurrency",
            "domain": "http://schema.org/Offer",
            "range": "xmls:string"
          },
          "hydra:title": "priceCurrency",
          "hydra:required": true,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The currency (in 3-letter ISO 4217 format) of the price or a price component, when attached to  and its subtypes"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/itemOffered",
            "@type": "rdf:Property",
            "rdfs:label": "itemOffered",
            "domain": "http://schema.org/Offer",
            "range": "http://schema.org/Flight"
          },
          "hydra:title": "itemOffered",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The item being offered"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/price",
            "@type": "rdf:Property",
            "rdfs:label": "price",
            "domain": "http://schema.org/Offer",
            "range": "xmls:decimal"
          },
          "hydra:title": "price",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes."
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/seller",
            "@type": "rdf:Property",
            "rdfs:label": "seller",
            "domain": "http://schema.org/Offer",
            "range": "xmls:string"
          },
          "hydra:title": "seller",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "An entity which offers (sells / leases / lends / loans) the services / goods. A seller may also be a provider"
        }
      ],
      "hydra:supportedOperation": [
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/Action"
          ],
          "hydra:method": "GET",
          "hydra:title": "Retrieves Offer resource.",
          "rdfs:label": "Retrieves Offer resource.",
          "returns": "http://schema.org/Offer"
        },
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/UpdateAction"
          ],
          "expects": "http://schema.org/Offer",
          "hydra:method": "PUT",
          "hydra:title": "Replaces the Offer resource.",
          "rdfs:label": "Replaces the Offer resource.",
          "returns": "http://schema.org/Offer"
        },
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/DeleteAction"
          ],
          "hydra:method": "DELETE",
          "hydra:title": "Deletes the Offer resource.",
          "rdfs:label": "Deletes the Offer resource.",
          "returns": "owl:Nothing"
        }
      ]
    },
    {
      "@id": "vocab:Airport",
      "@type": [
        "hydra:Class",
        "http://schema.org/Airport"
      ],
      "jsonld_context": "test",
      "rdfs:label": "Airport",
      "hydra:title": "Airport",
      "hydra:supportedProperty": [
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/iataCode",
            "@type": "rdf:Property",
            "rdfs:label": "iataCode",
            "domain": "http://schema.org/Airport",
            "range": "xmls:string"
          },
          "hydra:title": "iataCode",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "IATA identifier for an airline or airport"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/address",
            "@type": "hydra:Link",
            "rdfs:label": "address",
            "domain": "http://schema.org/Airport",
            "range": "http://schema.org/PostalAddress"
          },
          "hydra:title": "address",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "Physical address of the item"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/potentialAction",
            "@type": "hydra:Link",
            "rdfs:label": "potentialAction",
            "domain": "http://schema.org/Airport",
            "range": "http://schema.org/Action"
          },
          "hydra:title": "potentialAction",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "Indicates a potential Action, which describes an idealized action in which this thing would play an object role"
        }
      ],
      "hydra:supportedOperation": [
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/Action"
          ],
          "hydra:method": "GET",
          "hydra:title": "Retrieves Airport resource.",
          "rdfs:label": "Retrieves Airport resource.",
          "returns": "http://schema.org/Airport"
        },
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/UpdateAction"
          ],
          "expects": "http://schema.org/Airport",
          "hydra:method": "PUT",
          "hydra:title": "Replaces the Airport resource.",
          "rdfs:label": "Replaces the Airport resource.",
          "returns": "http://schema.org/Airport"
        },
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/DeleteAction"
          ],
          "hydra:method": "DELETE",
          "hydra:title": "Deletes the Airport resource.",
          "rdfs:label": "Deletes the Airport resource.",
          "returns": "owl:Nothing"
        }
      ]
    },
    {
      "@id": "vocab:Thing",
      "@type": [
        "hydra:Class",
        "http://schema.org/Thing"
      ],
      "jsonld_context": "test",
      "rdfs:label": "Thing",
      "hydra:title": "Thing",
      "hydra:supportedProperty": [
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/additionalType",
            "@type": "rdf:Property",
            "rdfs:label": "additionalType",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "additionalType",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/alternateName",
            "@type": "rdf:Property",
            "rdfs:label": "alternateName",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "alternateName",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "An alias for the item"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/description",
            "@type": "rdf:Property",
            "rdfs:label": "description",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "description",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "A description of the item"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/disambiguatingDescription",
            "@type": "rdf:Property",
            "rdfs:label": "disambiguatingDescription",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "disambiguatingDescription",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/image",
            "@type": "rdf:Property",
            "rdfs:label": "image",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "image",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "An image of the item. This can be a"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/mainEntityOfPage",
            "@type": "rdf:Property",
            "rdfs:label": "mainEntityOfPage",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "mainEntityOfPage",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/name",
            "@type": "rdf:Property",
            "rdfs:label": "name",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "name",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The name of the item"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/sameAs",
            "@type": "rdf:Property",
            "rdfs:label": "sameAs",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "sameAs",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "URL of a reference Web page that unambiguously indicates the items identity. E.g. the URL of the items Wikipedia page, Wikidata entry, or official website"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/url",
            "@type": "rdf:Property",
            "rdfs:label": "url",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "url",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "URL of the item"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/potentialAction",
            "@type": "hydra:Link",
            "rdfs:label": "potentialAction",
            "domain": "http://schema.org/Thing",
            "range": "http://schema.org/Action"
          },
          "hydra:title": "potentialAction",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "Indicates a potential Action, which describes an idealized action in which this thing would play an  role"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/identifier",
            "@type": "rdf:Property",
            "rdfs:label": "identifier",
            "domain": "http://schema.org/Thing",
            "range": "xmls:string"
          },
          "hydra:title": "identifier",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The identifier property represents any kind of identifier for any kind of [[Thing], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details"
        }
      ],
      "hydra:supportedOperation": [
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/Action"
          ],
          "hydra:method": "GET",
          "hydra:title": "Retrieves Thing resource.",
          "rdfs:label": "Retrieves Thing resource.",
          "returns": "http://schema.org/Thing"
        }
      ]
    },
    {
      "@id": "vocab:Flight",
      "@type": [
        "hydra:Class",
        "http://schema.org/Flight"
      ],
      "jsonld_context": "test",
      "rdfs:label": "Flight",
      "hydra:title": "Flight",
      "hydra:supportedProperty": [
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/additionalType",
            "@type": "rdf:Property",
            "rdfs:label": "additionalType",
            "domain": "http://schema.org/Flight",
            "range": "xmls:string"
          },
          "hydra:title": "additionalType",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "#Flight/arivalAirport",
            "@type": "hydra:Link",
            "rdfs:label": "arivalAirport",
            "domain": "http://schema.org/Flight",
            "range": "http://schema.org/Airport"
          },
          "hydra:title": "arivalAirport",
          "hydra:required": true,
          "hydra:readable": true,
          "hydra:writable": true
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/departureAirport",
            "@type": "hydra:Link",
            "rdfs:label": "departureAirport",
            "domain": "http://schema.org/Flight",
            "range": "http://schema.org/Airport"
          },
          "hydra:title": "departureAirport",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The airport where the flight originates"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/departureTime",
            "@type": "rdf:Property",
            "rdfs:label": "departureTime",
            "domain": "http://schema.org/Flight",
            "range": "xmls:dateTime"
          },
          "hydra:title": "departureTime",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The expected departure time"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/arrivalTime",
            "@type": "rdf:Property",
            "rdfs:label": "arrivalTime",
            "domain": "http://schema.org/Flight",
            "range": "xmls:dateTime"
          },
          "hydra:title": "arrivalTime",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The expected arrival time"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/provider",
            "@type": "rdf:Property",
            "rdfs:label": "provider",
            "domain": "http://schema.org/Flight",
            "range": "xmls:string"
          },
          "hydra:title": "provider",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller"
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "http://schema.org/potentialAction",
            "@type": "hydra:Link",
            "rdfs:label": "potentialAction",
            "domain": "http://schema.org/Flight",
            "range": "http://schema.org/Action"
          },
          "hydra:title": "potentialAction",
          "hydra:required": false,
          "hydra:readable": true,
          "hydra:writable": true,
          "hydra:description": "Indicates a potential Action, which describes an idealized action in which this thing would play an  role"
        }
      ],
      "hydra:supportedOperation": [
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/Action"
          ],
          "hydra:method": "GET",
          "hydra:title": "Retrieves Flight resource.",
          "rdfs:label": "Retrieves Flight resource.",
          "returns": "http://schema.org/Flight"
        },
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/UpdateAction"
          ],
          "expects": "http://schema.org/Flight",
          "hydra:method": "PUT",
          "hydra:title": "Replaces the Flight resource.",
          "rdfs:label": "Replaces the Flight resource.",
          "returns": "http://schema.org/Flight"
        },
        {
          "@type": [
            "hydra:operation",
            "http://schema.org/DeleteAction"
          ],
          "hydra:method": "DELETE",
          "hydra:title": "Deletes the Flight resource.",
          "rdfs:label": "Deletes the Flight resource.",
          "returns": "owl:Nothing"
        }
      ]
    },
    {
      "@id": "vocab:Entrypoint",
      "@type": "hydra:Class",
      "hydra:title": "The API entrypoint",
      "hydra:supportedProperty": [
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "/actions",
            "@type": "hydra:Link",
            "domain": "#Entrypoint",
            "rdfs:label": "The collection of Action resources",
            "range": {
              "@type": "hydra:PartialCollectionView",
              "hydra:member": {
                "@type": "#Action"
              },
              "hydra:search": [
                  null
                ]
            },
            "hydra:supportedOperation": [
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/Action"
                ],
                "hydra:method": "GET",
                "hydra:title": "Retrieves the collection of Action resources.",
                "rdfs:label": "Retrieves the collection of Action resources.",
                "returns": "hydra:PartialCollectionView"
              },
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/AddAction"
                ],
                "expects": "http://schema.org/Action",
                "hydra:method": "POST",
                "hydra:title": "Creates a Action resource.",
                "rdfs:label": "Creates a Action resource.",
                "returns": "http://schema.org/Action"
              }
            ]
          },
          "hydra:title": "The collection of Action resources",
          "hydra:readable": true,
          "hydra:writable": false
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "/postal_addresses",
            "@type": "hydra:Link",
            "domain": "#Entrypoint",
            "rdfs:label": "The collection of PostalAddress resources",
            "range": {
              "@type": "hydra:PartialCollectionView",
              "hydra:member": {
                "@type": "vocab:PostalAddress"
              },
                 "hydra:search": [
                  null
                ]
            },
            "hydra:supportedOperation": [
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/Action"
                ],
                "hydra:method": "GET",
                "hydra:title": "Retrieves the collection of PostalAddress resources.",
                "rdfs:label": "Retrieves the collection of PostalAddress resources.",
                "returns": "hydra:PartialCollectionView"
              },
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/AddAction"
                ],
                "expects": "http://schema.org/PostalAddress",
                "hydra:method": "POST",
                "hydra:title": "Creates a PostalAddress resource.",
                "rdfs:label": "Creates a PostalAddress resource.",
                "returns": "http://schema.org/PostalAddress"
              }
            ]
          },
          "hydra:title": "The collection of PostalAddress resources",
          "hydra:readable": true,
          "hydra:writable": false
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "/offers",
            "@type": "hydra:Link",
            "domain": "#Entrypoint",
            "rdfs:label": "The collection of Offer resources",
            "range": {
              "@type": "hydra:PartialCollectionView",
              "hydra:member": {
                "@type": "vocab:Offer"
              },
              "hydra:search": [
                  {
                    "@type": "hydra:IriTemplate",
                    "hydra:template": "/offers{?itemOffered,itemOffered[],itemOffered.departureAirport.iataCode,itemOffered.departureAirport.iataCode[],price,price[]}",
                    "hydra:variableRepresentation": "BasicRepresentation",
                    "hydra:mapping": [
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "itemOffered",
                        "property": "itemOffered",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "itemOffered[]",
                        "property": "itemOffered",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "itemOffered.departureAirport.iataCode",
                        "property": "itemOffered.departureAirport.iataCode",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "itemOffered.departureAirport.iataCode[]",
                        "property": "itemOffered.departureAirport.iataCode",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "price",
                        "property": "price",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "price[]",
                        "property": "price",
                        "required": false
                      }
                    ]
                  }
              ]
            },
            "hydra:supportedOperation": [
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/searchAction"
                ],
                "hydra:method": "GET",
                "hydra:title": "Retrieves the collection of Offer resources.",
                "rdfs:label": "Retrieves the collection of Offer resources.",
                "returns": "hydra:PartialCollectionView"
              },
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/AddAction"
                ],
                "expects": "http://schema.org/Offer",
                "hydra:method": "POST",
                "hydra:title": "Creates a Offer resource.",
                "rdfs:label": "Creates a Offer resource.",
                "returns": "http://schema.org/Offer"
              }
            ]
          },
          "hydra:title": "The collection of Offer resources",
          "hydra:readable": true,
          "hydra:writable": false
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "/airports",
            "@type": "hydra:Link",
            "domain": "#Entrypoint",
            "rdfs:label": "The collection of Airport resources",
            "range": {
              "@type": "hydra:PartialCollectionView",
              "hydra:member": {
                "@type": "#Airport"
              },
                   "hydra:search": [
                  null
                ]
            },
            "hydra:supportedOperation": [
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/Action"
                ],
                "hydra:method": "GET",
                "hydra:title": "Retrieves the collection of Airport resources.",
                "rdfs:label": "Retrieves the collection of Airport resources.",
                "returns": "hydra:PartialCollectionView"
              },
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/AddAction"
                ],
                "expects": "http://schema.org/Airport",
                "hydra:method": "POST",
                "hydra:title": "Creates a Airport resource.",
                "rdfs:label": "Creates a Airport resource.",
                "returns": "http://schema.org/Airport"
              }
            ]
          },
          "hydra:title": "The collection of Airport resources",
          "hydra:readable": true,
          "hydra:writable": false
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "/things",
            "@type": "hydra:Link",
            "domain": "#Entrypoint",
            "rdfs:label": "The collection of Thing resources",
            "range": {
              "@type": "hydra:PartialCollectionView",
              "hydra:member": {
                "@type": "#Thing"
              },
              "hydra:search": [
                null
            ]
            },
            "hydra:supportedOperation": [
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/Action"
                ],
                "hydra:method": "GET",
                "hydra:title": "Retrieves the collection of Thing resources.",
                "rdfs:label": "Retrieves the collection of Thing resources.",
                "returns": "hydra:PartialCollectionView"
              }
            ]
          },
          "hydra:title": "The collection of Thing resources",
          "hydra:readable": true,
          "hydra:writable": false
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "/flights",
            "@type": "hydra:Link",
            "domain": "#Entrypoint",
            "rdfs:label": "The collection of Flight resources",
            "range": {
              "@type": "hydra:PartialCollectionView",
              "hydra:member": {
                "@type": "#Flight"
              },
              "hydra:search": [
                  {
                    "@type": "hydra:IriTemplate",
                    "hydra:template": "/flights{?departureAirport,departureAirport[],arrivalAirport.id,arrivalAirport.id[],departureTime,departureTime[],arrivalTime}",
                    "hydra:variableRepresentation": "BasicRepresentation",
                    "hydra:mapping": [
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "departureAirport",
                        "property": "departureAirport",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "departureAirport[]",
                        "property": "departureAirport",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "arrivalAirport.id",
                        "property": "arrivalAirport.id",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "arrivalAirport.id[]",
                        "property": "arrivalAirport.id",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "departureTime",
                        "property": "departureTime",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "departureTime[]",
                        "property": "departureTime",
                        "required": false
                      },
                      {
                        "@type": "IriTemplateMapping",
                        "variable": "arrivalTime",
                        "property": "arrivalTime",
                        "required": false
                      }
                    ]
                  }
                ]
            },
            "hydra:supportedOperation": [
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/Action"
                ],
                "hydra:method": "GET",
                "hydra:title": "Retrieves the collection of Flight resources.",
                "rdfs:label": "Retrieves the collection of Flight resources.",
                "returns": "hydra:PartialCollectionView"
              },
              {
                "@type": [
                  "hydra:operation",
                  "http://schema.org/AddAction"
                ],
                "expects": "http://schema.org/Flight",
                "hydra:method": "POST",
                "hydra:title": "Creates a Flight resource.",
                "rdfs:label": "Creates a Flight resource.",
                "returns": "http://schema.org/Flight"
              }
            ]
          },
          "hydra:title": "The collection of Flight resources",
          "hydra:readable": true,
          "hydra:writable": false
        }
      ],
      "hydra:supportedOperation": {
        "@type": "hydra:Operation",
        "hydra:method": "GET",
        "rdfs:label": "The API entrypoint.",
        "returns": "#EntryPoint"
      }
    },
    {
      "@id": "#ConstraintViolation",
      "@type": "hydra:Class",
      "hydra:title": "A constraint violation",
      "hydra:supportedProperty": [
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "#ConstraintViolation/propertyPath",
            "@type": "rdf:Property",
            "rdfs:label": "propertyPath",
            "domain": "#ConstraintViolation",
            "range": "xmls:string"
          },
          "hydra:title": "propertyPath",
          "hydra:description": "The property path of the violation",
          "hydra:readable": true,
          "hydra:writable": false
        },
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "#ConstraintViolation/message",
            "@type": "rdf:Property",
            "rdfs:label": "message",
            "domain": "#ConstraintViolation",
            "range": "xmls:string"
          },
          "hydra:title": "message",
          "hydra:description": "The message associated with the violation",
          "hydra:readable": true,
          "hydra:writable": false
        }
      ]
    },
    {
      "@id": "#ConstraintViolationList",
      "@type": "hydra:Class",
      "subClassOf": "hydra:Error",
      "hydra:title": "A constraint violation list",
      "hydra:supportedProperty": [
        {
          "@type": "hydra:SupportedProperty",
          "hydra:property": {
            "@id": "#ConstraintViolationList/violations",
            "@type": "rdf:Property",
            "rdfs:label": "violations",
            "domain": "#ConstraintViolationList",
            "range": "#ConstraintViolation"
          },
          "hydra:title": "violations",
          "hydra:description": "The violations",
          "hydra:readable": true,
          "hydra:writable": false
        }
      ]
    }
  ]
}';
        return new Response($testHydra); // API Platform will automatically validate, persist (if you use Doctrine) and serialize an entity
                      // for you. If you prefer to do it yourself, return an instance of Symfony\Component\HttpFoundation\Response
    }
}